#!/usr/bin/env python3

#
# Copyright (C) 2013-2021 Christoph Sommer <sommer@ccs-labs.org>
#
# Documentation for these modules is at http://veins.car2x.org/
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

"""
Creates Makefile(s) for building this project.
"""
from os import mkdir
from os.path import join, isdir
import subprocess
import sys
# avoid adding __init__.py to src and scripts folders
sys.path.insert(0, "./src/scripts/")
from library import Library, LibraryChecker, ExternalLibrary

plexe = Library(name="Plexe", library="plexe", default_path="../plexe",
                versions=["3.1.3"], source_folder="src/plexe",
                lib_folder="src", images_folder="images",
                version_script="print-plexe-version")
veins = Library(name="Veins", library="veins", default_path="../veins",
                versions=["5.2"], source_folder="src/veins", lib_folder="src",
                images_folder="images", version_script="print-veins-version")
gsl = ExternalLibrary(name="GNU Scientific Library (GSL)", library="gsl", lflags="-lgsl -lgslcblas -lm")

gpu_support = None
parallel_paradigm_libs = None

if len(sys.argv) > 1 and "--with-cuda" in sys.argv:
    sys.argv.remove("--with-cuda")
    gpu_support = "cuda"
    parallel_paradigm_libs = ExternalLibrary(
        name="CUDA", library="cuda", lflags="-lcudart"
    )

elif len(sys.argv) > 1 and "--with-opencl" in sys.argv:
    sys.argv.remove("--with-opencl")
    gpu_support = "opencl"
    parallel_paradigm_libs = ExternalLibrary(
        name="OPENCL", library="opencl", lflags="-lOpenCL"
    )

libraries = LibraryChecker()
libraries.add_lib(plexe)
libraries.add_lib(veins)
libraries.add_lib(gsl)
if parallel_paradigm_libs is not None:
    libraries.add_lib(parallel_paradigm_libs)

# Start with default flags
makemake_flags = ["-f", "--deep", "--no-deep-includes", "--make-so", "-I", ".", "-o", "cooperis", "-O", "out", "-p", "COOPERIS"]

if gpu_support:
    makemake_flags.append("-K")
    if gpu_support == "cuda":
        makemake_flags.append("COMPUTE_ENGINE=cuda")
    elif gpu_support == "opencl":
        makemake_flags.append("COMPUTE_ENGINE=opencl")
else:
    makemake_flags.append("-pthread")

run_libs = []
run_neds = []
run_imgs = []
libraries.check_libraries(makemake_flags, run_libs, run_neds, run_imgs)

run_libs.append(join("src", "cooperis"))
run_neds.append(join("src", "cooperis"))

# Start creating files
if not isdir("out"):
    mkdir("out")

f = open(join("out", "config.py"), "w")
f.write("run_libs = %s\n" % repr(run_libs))
f.write("run_neds = %s\n" % repr(run_neds))
f.write("run_imgs = %s\n" % repr(run_imgs))
f.close()

subprocess.check_call(["env", "opp_makemake"] + makemake_flags, cwd="src")

print("Configure done. You can now run 'make'.")
